

use teloxide::prelude::*;
use teloxide::types::{InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery};
use teloxide::utils::command::BotCommand;
use dotenv::dotenv;
use std::env;

#[tokio::main]
async fn main() {
    dotenv().ok();
    env_logger::init();

    let bot = Bot::from_env().auto_send();

    teloxide::repl(bot.clone(), move |msg| {
        let bot = bot.clone();
        async move {
            if let Some(text) = msg.update.text() {
                match text {
                    "/start" => {
                        let keyboard = InlineKeyboardMarkup::new(vec![
                            vec![
                                InlineKeyboardButton::callback("üíé –ö—É–ø–∏—Ç—å –ì–µ–º—ã", "buy_gems"),
                                InlineKeyboardButton::callback("ü™ô –ö—É–ø–∏—Ç—å –†–æ–±—É–∫—Å—ã", "buy_robux"),
                            ],
                        ]);
                        msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:").reply_markup(keyboard).await?;
                    }
                    _ => {
                        msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.").await?;
                    }
                }
            }
            Ok(())
        }
    })
    .await;
}
