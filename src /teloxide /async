

use teloxide::prelude::*;
use teloxide::types::{InlineKeyboardButton, InlineKeyboardMarkup};
use dotenv::dotenv;
use std::env;

#[tokio::main]
async fn main() {
    dotenv().ok();
    env_logger::init();

    // –ë–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELOXIDE_TOKEN
    let bot = Bot::from_env().auto_send();

    teloxide::repl(bot, |message| async move -> Result<(), teloxide::RequestError> {
        let text = message.update.text().unwrap_or_default();

        match text {
            "/start" => {
                let keyboard = InlineKeyboardMarkup::new(vec![vec![
                    InlineKeyboardButton::callback("üíé –ì–µ–º—ã", "buy_gems"),
                    InlineKeyboardButton::callback("ü™ô –†–æ–±—É–∫—Å—ã", "buy_robux"),
                ]]);

                bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å?")
                    .reply_markup(keyboard)
                    .await?;
            }
            _ => {
                bot.send_message(message.chat.id, "–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω—è–ª —Ç–µ–±—è. –ò—Å–ø–æ–ª—å–∑—É–π /start.")
                    .await?;
            }
        }
        Ok(())
    })
    .await;
}
